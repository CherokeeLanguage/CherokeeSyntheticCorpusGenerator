plugins {
  id "it.gianluz.capsule" version "1.0.3"
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'maven'

group = "com.github.CherokeeLanguage"
version = '20191027'

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

repositories {
    jcenter()
	mavenCentral()
    maven { url "https://jitpack.io" }
}

configurations {
	provided
}

dependencies {
	implementation 'commons-io:commons-io:+'
	implementation 'org.apache.commons:commons-text:+'

	annotationProcessor ('com.google.dagger:dagger-compiler:2.+')
	implementation ('javax.inject:javax.inject:1')
	implementation ('com.google.dagger:dagger:2.+')
	
	// https://mvnrepository.com/artifact/org.testng/testng
	testImplementation group: 'org.testng', name: 'testng', version: '7.+'
}

sourceSets {
  main {
    compileClasspath += configurations.provided
  }
  test {
    compileClasspath += configurations.provided
    runtimeClasspath += configurations.provided
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	javadoc.failOnError=false
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


eclipseJdt {
doLast {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=utf-8')
    f = file('.settings/org.eclipse.core.runtime.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('line.separator=\\n\n')
}}

task fatjar(type: FatCapsule) {
  	archiveName 'CherokeeSyntheticCorpusGenerator.jar'
	applicationClass 'com.cherokeelessons.syncorpus.Main'
	capsuleManifest {
    	jvmArgs = ['-Dfile.encoding=UTF-8']
	}
}

eclipse {
	project {
		name = 'CherokeeSyntheticCorpusGenerator'
		referencedProjects
	}
	
	classpath {
		plusConfigurations += [configurations.provided]
		downloadSources = true
		downloadJavadoc = true
	}

	jdt {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}

	wtp {
		facet {
			facets = []
			facet name: 'jst.java', version: '1.8'
		}
	}

}

task "create-dirs" {
doLast {
	sourceSets*.java.srcDirs*.each { it.mkdirs() }
	sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}
}

test {
  // enable TestNG support (default is JUnit)
  useTestNG()
  testLogging.showStandardStreams = true
  failFast = true
}